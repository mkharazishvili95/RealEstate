@model RealEstate_Manage.Models.User.List.UserListViewModel
<meta name="viewport" content="width=device-width, initial-scale=1.0">

@{
    ViewData["Title"] = "მომხმარებელთა სია";
}

<h2>მომხმარებლები</h2>

<form asp-action="UserList" method="get" class="container-fluid">
    <table class="table table-bordered table-striped w-100">
        <thead class="thead-dark">
            <tr>
                <th>სახელი</th>
                <th>გვარი</th>
                <th>PIN</th>
                <th>Username</th>
                <th>ელფოსტა</th>
                <th>მობილური</th>
                <th>ბალანსი</th>
                <th>დაბლოკილი</th>
                <th>რეგისტრაციის თარიღი</th>
                <th></th>
            </tr>
            <tr>
                <th><input type="text" name="FirstName" value="@Model.Filter.FirstName" class="form-control form-control-sm" /></th>
                <th><input type="text" name="LastName" value="@Model.Filter.LastName" class="form-control form-control-sm" /></th>
                <th><input type="text" name="PIN" value="@Model.Filter.PIN" class="form-control form-control-sm" /></th>
                <th><input type="text" name="UserName" value="@Model.Filter.UserName" class="form-control form-control-sm" /></th>
                <th><input type="text" name="Email" value="@Model.Filter.Email" class="form-control form-control-sm" /></th>
                <th><input type="text" name="PhoneNumber" value="@Model.Filter.PhoneNumber" class="form-control form-control-sm" /></th>
                <th>
                    <input type="number" name="BalanceFrom" placeholder="დან" value="@Model.Filter.BalanceFrom" class="form-control form-control-sm mb-1" />
                    <input type="number" name="BalanceTo" placeholder="მდე" value="@Model.Filter.BalanceTo" class="form-control form-control-sm" />
                </th>
                <th>
                    @Html.DropDownList("IsBlocked", new List<SelectListItem>
                    {
                    new SelectListItem { Text = "ყველა", Value = "" },
                    new SelectListItem { Text = "კი", Value = "true" },
                    new SelectListItem { Text = "არა", Value = "false" }
                    }, new { @class = "form-control form-control-sm" })
                </th>
                <th>
                    <input type="date" name="RegisterDateFrom" value="@Model.Filter.RegisterDateFrom?.ToString("yyyy-MM-dd")" class="form-control form-control-sm mb-1" />
                    <input type="date" name="RegisterDateTo" value="@Model.Filter.RegisterDateTo?.ToString("yyyy-MM-dd")" class="form-control form-control-sm" />
                </th>
                <th>
                    <div class="d-flex justify-content-end mb-4">
                        <button type="submit" class="btn btn-primary btn-sm">ძიება</button>
                        <a href="@Url.Action("UserList", "Manage")" class="btn btn-secondary btn-sm ms-2">გასუფთავება</a>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Users != null && Model.Users.Any())
            {
                foreach (var user in Model.Users)
                {
                    <tr>
                        <td>@user.FirstName</td>
                        <td>@user.LastName</td>
                        <td>@user.PIN</td>
                        <td>@user.UserName</td>
                        <td>@user.Email</td>
                        <td>@user.PhoneNumber</td>
                        <td>@user.Balance?.ToString("C")</td>
                        <td>@(user.IsBlocked ? "კი" : "არა")</td>
                        <td>@user.RegisterDate?.ToString("yyyy-MM-dd")</td>
                        <td>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    მოქმედება
                                </button>
                                <ul class="dropdown-menu">
                                    @if (user.IsBlocked)
                                    {
                                        <li>
                                            <button type="button" class="dropdown-item text-success unblock-user-btn"
                                                    data-user-id="@user.UserId">
                                                <i class="bi bi-unlock"></i> ბლოკის მოხსნა
                                            </button>
                                        </li>
                                    }
                                    else
                                    {
                                        <li>
                                            <button type="button" class="dropdown-item text-danger block-user-btn"
                                                    data-user-id="@user.UserId">
                                                <i class="bi bi-lock"></i> დაბლოკვა
                                            </button>
                                        </li>
                                        <li>
                                            <button type="button" class="dropdown-item text-info topup-user-btn"
                                                    data-user-id="@user.UserId">
                                                <i class="bi bi-credit-card"></i> ბალანსის შევსება
                                            </button>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="10" class="text-center">მომხმარებლები ვერ მოიძებნა.</td>
                </tr>
            }
        </tbody>
    </table>

    
    <div class="d-flex justify-content-center mt-4">
        @if (Model.Page > 1)
        {
            <a class="btn btn-secondary mx-1" asp-action="UserList"
               asp-route-Page="@(Model.Page - 1)" asp-route-PageSize="@Model.PageSize">უკან</a>
        }

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <a class="btn @(i == Model.Page ? "btn-primary" : "btn-outline-primary") mx-1"
               asp-action="UserList" asp-route-Page="@i" asp-route-PageSize="@Model.PageSize">@i</a>
        }

        @if (Model.Page < Model.TotalPages)
        {
            <a class="btn btn-secondary mx-1" asp-action="UserList"
               asp-route-Page="@(Model.Page + 1)" asp-route-PageSize="@Model.PageSize">წინ</a>
        }
    </div>

    <div class="d-flex justify-content-center mt-4">
        <a href="@Url.Action("Index", "Home")" class="btn btn-primary">← უკან დაბრუნება</a>
    </div>
</form>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<style>
    table {
        min-width: 100%;
    }

    body, html {
        margin: 0;
        padding: 0;
        width: 100%;
    }

    .container-fluid {
        padding: 0;
    }

    .container {
        max-width: 90% !important;
        padding: 0;
    }

    .dropdown-item {
        display: flex;
        align-items: center;
        padding: 10px 15px;
        border-radius: 8px;
        transition: all 0.3s ease;
        justify-content: flex-start;
    }

        .dropdown-item i {
            margin-right: 10px;
        }

        .dropdown-item:hover {
            background-color: #f8f9fa;
            transform: scale(1.05);
        }

    .text-info.topup-user-btn {
        background-color: white;
        color: white;
        border: none;
        display: flex;
        align-items: center;
        justify-content: flex-start;
    }

        .text-info.topup-user-btn:hover {
            background-color: white;
        }

    .text-success.unblock-user-btn {
        background-color: white;
        color: white;
        border: none;
        display: flex;
        align-items: center;
        justify-content: flex-start;
    }

        .text-success.unblock-user-btn:hover {
            background-color: white;
        }

    .text-danger.block-user-btn {
        background-color: white;
        color: white;
        border: none;
        display: flex;
        align-items: center;
        justify-content: flex-start;
    }

        .text-danger.block-user-btn:hover {
            background-color: white;
        }

    .dropdown-toggle {
        background-color: #6f42c1;
        color: white;
        border-radius: 8px;
        padding: 10px 15px;
        display: flex;
        align-items: center;
        justify-content: flex-start;
    }

        .dropdown-toggle:hover {
            background-color: #5a32a3;
            transform: scale(1.05);
        }



</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        async function sendBlockRequest(userId, isBlocking) {
            const confirmResult = await Swal.fire({
                title: isBlocking ? 'დაბლოკვა?' : 'ბლოკის მოხსნა?',
                text: isBlocking
                    ? 'დარწმუნებული ხართ, რომ გსურთ ამ მომხმარებლის დაბლოკვა?'
                    : 'დარწმუნებული ხართ, რომ გსურთ ამ მომხმარებელზე ბლოკის მოხსნა?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'დიახ',
                cancelButtonText: 'არა'
            });

            if (!confirmResult.isConfirmed) return;

            let data = { userId: userId };

            if (isBlocking) {
                const { value: reason } = await Swal.fire({
                    title: 'შეიყვანეთ დაბლოკვის მიზეზი',
                    input: 'text',
                    inputLabel: 'მიზეზი (არასავალდებულო)',
                    showCancelButton: true,
                    inputPlaceholder: 'მაგ. სპამი, არასწორი ინფორმაცია და ა.შ.'
                });

                if (reason === null) return;
                data.blockReason = reason || null;
            }

            const endpoint = isBlocking ? '/Manage/BlockUser' : '/Manage/UnblockUser';

            try {
                const response = await fetch(endpoint, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                Swal.fire({
                    icon: result.success ? 'success' : 'error',
                    title: result.success ? 'წარმატებით შესრულდა' : 'შეცდომა',
                    text: result.message
                }).then(() => {
                    if (result.success) location.reload();
                });
            } catch (error) {
                Swal.fire('შეცდომა', 'მოთხოვნის შესრულება ვერ მოხერხდა.', 'error');
            }
        }

               async function sendTopUpRequest(userId) {
            let amount = null;

            while (true) {
                const { value, isConfirmed, isDismissed } = await Swal.fire({
                    title: 'შეიყვანეთ ბალანსის თანხა',
                    input: 'number',
                    inputLabel: 'თანხა',
                    inputPlaceholder: 'მაგ. 100',
                    showCancelButton: true,
                    inputAttributes: {
                        min: 1,
                        step: 0.01
                    }
                });

                if (isDismissed) return;

                amount = parseFloat(value);
                if (!isNaN(amount) && amount > 0) break;

                await Swal.fire('შეცდომა', 'გთხოვთ შეიყვანოთ ვალიდური თანხა.', 'warning');
            }

            const data = {
                userId: userId,
                balance: amount
            };

            try {
                const response = await fetch('/Manage/TopUpBalance', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                Swal.fire({
                    icon: result.success ? 'success' : 'error',
                    title: result.success ? 'წარმატებით შესრულდა' : 'შეცდომა',
                    text: result.message
                }).then(() => {
                    if (result.success) location.reload();
                });
            } catch (error) {
                Swal.fire('შეცდომა', 'მოთხოვნის შესრულება ვერ მოხერხდა.', 'error');
            }
        }

        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".block-user-btn").forEach(button => {
                button.addEventListener("click", () => {
                    sendBlockRequest(button.dataset.userId, true);
                });
            });

            document.querySelectorAll(".unblock-user-btn").forEach(button => {
                button.addEventListener("click", () => {
                    sendBlockRequest(button.dataset.userId, false);
                });
            });

            document.querySelectorAll(".topup-user-btn").forEach(button => {
                button.addEventListener("click", () => {
                    sendTopUpRequest(button.dataset.userId);
                });
            });
        });
    </script>
}

