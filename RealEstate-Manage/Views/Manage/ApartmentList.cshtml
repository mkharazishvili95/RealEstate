@using RealEstate_Manage.Extensions
@model RealEstate_Manage.Models.Apartment.List.ApartmentListViewModel
<meta name="viewport" content="width=device-width, initial-scale=1.0">

@{
    ViewData["Title"] = "უძრავი ქონების სია";
}

<h2>უძრავი ქონება</h2>

<form asp-action="ApartmentList" method="get" class="container-fluid">
    <table class="table table-bordered table-striped w-100">
        <thead class="thead-dark">
            <tr>
                <th>ID</th>
                <th>სათაური</th>
                <th>ავტორის PIN</th>
                <th>ფასი</th>
                <th>ვალუტა</th>
                <th>სააგენტოს ID</th>
                <th>შექმნის თარიღი</th>
                <th>განახლების თარიღი</th>
                <th>სტატუსი</th>
                <th></th>
            </tr>
            <tr>
                <th><input type="number" name="ApartmentId" value="@Model.Filter.ApartmentId" class="form-control form-control-sm" /></th>
                <th><input type="text" name="Title" value="@Model.Filter.Title" class="form-control form-control-sm" /></th>
                <th><input type="text" name="UserPin" value="@Model.Filter.UserPin" class="form-control form-control-sm" /></th>
                <th>
                    <input type="number" name="PriceFrom" placeholder="დან" value="@Model.Filter.PriceFrom" class="form-control form-control-sm mb-1" />
                    <input type="number" name="PriceTo" placeholder="მდე" value="@Model.Filter.PriceTo" class="form-control form-control-sm" />
                </th>
                <th>
                    @Html.DropDownList("CurrencyId", (List<SelectListItem>)ViewBag.Currencies, new { @class = "form-control form-control-sm" })
                </th>
                <th><input type="number" name="AgencyId" value="@Model.Filter.AgencyId" class="form-control form-control-sm" /></th>
                <th>
                    <input type="date" name="CreateDateFrom" value="@Model.Filter.CreateDateFrom?.ToString("yyyy-MM-dd")" class="form-control form-control-sm mb-1" />
                    <input type="date" name="CreateDateTo" value="@Model.Filter.CreateDateTo?.ToString("yyyy-MM-dd")" class="form-control form-control-sm" />
                </th>
                <th>
                    <input type="date" name="UpdateDateFrom" value="@Model.Filter.UpdateDateFrom?.ToString("yyyy-MM-dd")" class="form-control form-control-sm mb-1" />
                    <input type="date" name="UpdateDateTo" value="@Model.Filter.UpdateDateTo?.ToString("yyyy-MM-dd")" class="form-control form-control-sm" />
                </th>
                @* <th>
                    <input type="date" name="DeleteDateFrom" value="@Model.Filter.DeleteDateFrom?.ToString("yyyy-MM-dd")" class="form-control form-control-sm mb-1" />
                    <input type="date" name="DeleteDateTo" value="@Model.Filter.DeleteDateTo?.ToString("yyyy-MM-dd")" class="form-control form-control-sm" />
                </th> *@
                <th>
                    @Html.DropDownList("Status", (List<SelectListItem>)ViewBag.Status, new { @class = "form-control form-control-sm" })
                </th>
                <th>
                    <div class="d-flex justify-content-end mb-4">
                        <button type="submit" class="btn btn-primary btn-sm">ძიება</button>
                        <a href="@Url.Action("ApartmentList", "Manage")" class="btn btn-secondary btn-sm ms-2">გასუფთავება</a>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Apartments != null && Model.Apartments.Any())
            {
                foreach (var apartment in Model.Apartments)
                {
                    <tr>
                        <td>@apartment.ApartmentId</td>
                        <td>@apartment.Title</td>
                        <td>@apartment.UserPin</td>
                        <td>@apartment.Price</td>
                        <td>@apartment.Currency</td>
                        <td>@apartment.AgencyId</td>
                        <td>@apartment.CreateDate?.ToString("yyyy-MM-dd")</td>
                        <td>@apartment.UpdateDate?.ToString("yyyy-MM-dd")</td>
                        <td>@AgencyTypeExtensions.GetGeorgianStatus(apartment.Status)</td>
                        <td>
                            <div class="dropdown">
                                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    მოქმედებები
                                </button>
                                <ul class="dropdown-menu">
                                    @if (apartment.Status != RealEstate.Common.Enums.Apartment.ApartmentStatus.Blocked)
                                    {
                                        <li>
                                            <button type="button" class="dropdown-item text-danger block-apartment-btn"
                                                    data-apartment-id="@apartment.ApartmentId">
                                                <i class="bi bi-lock"></i> დაბლოკვა
                                            </button>
                                        </li>
                                    }
                                    else
                                    {
                                        <li>
                                            <button type="button" class="dropdown-item text-success unblock-apartment-btn"
                                                    data-apartment-id="@apartment.ApartmentId">
                                                <i class="bi bi-unlock"></i> განბლოკვა
                                            </button>
                                        </li>
                                    }
                                </ul>

                            </div>
                        </td>

                    </tr>
                }
            }
            else
            {
                <tr><td colspan="10" class="text-center">უძრავი ქონება არ მოიძებნა.</td></tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-center mt-4">
        @if (Model.Page > 1)
        {
            <a class="btn btn-secondary mx-1" asp-action="ApartmentList" asp-route-Page="@(Model.Page - 1)" asp-route-PageSize="@Model.PageSize">უკან</a>
        }

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <a class="btn @(i == Model.Page ? "btn-primary" : "btn-outline-primary") mx-1" asp-action="ApartmentList" asp-route-Page="@i" asp-route-PageSize="@Model.PageSize">@i</a>
        }

        @if (Model.Page < Model.TotalPages)
        {
            <a class="btn btn-secondary mx-1" asp-action="ApartmentList" asp-route-Page="@(Model.Page + 1)" asp-route-PageSize="@Model.PageSize">წინ</a>
        }
    </div>

    <div class="d-flex justify-content-center mt-4">
        <a href="@Url.Action("Index", "Home")" class="btn btn-primary">← უკან დაბრუნება</a>
    </div>
</form>

<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet" />

<style>
    table {
        min-width: 100%;
    }

    body, html {
        margin: 0;
        padding: 0;
        width: 100%;
    }

    .container-fluid {
        padding: 0;
    }

    .container {
        max-width: 90% !important;
        padding: 0;
    }
</style>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    async function sendApartmentBlockRequest(apartmentId, isBlocking) {
        const confirmResult = await Swal.fire({
            title: isBlocking ? 'დაბლოკვა?' : 'განბლოკვა?',
            text: isBlocking
                ? 'დარწმუნებული ხართ, რომ გსურთ ამ ბინის დაბლოკვა?'
                : 'დარწმუნებული ხართ, რომ გსურთ ამ ბინაზე ბლოკის მოხსნა?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'დიახ',
            cancelButtonText: 'არა'
        });

        if (!confirmResult.isConfirmed) return;

        let data = { apartmentId: apartmentId };

        if (isBlocking) {
            const { value: reason } = await Swal.fire({
                title: 'შეიყვანეთ დაბლოკვის მიზეზი',
                input: 'text',
                inputLabel: 'მიზეზი (არასავალდებულო)',
                showCancelButton: true,
                inputPlaceholder: 'მაგ. არასწორი მონაცემები, დაუდასტურებელი ქონება და ა.შ.'
            });

            if (reason === null) return;
            data.blockReason = reason || null;
        }

        const endpoint = isBlocking ? '/Manage/BlockApartment' : '/Manage/UnblockApartment';

        try {
            const response = await fetch(endpoint, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            Swal.fire({
                icon: result.success ? 'success' : 'error',
                title: result.success ? 'წარმატებით შესრულდა' : 'შეცდომა',
                text: result.message
            }).then(() => {
                if (result.success) location.reload();
            });
        } catch (error) {
            Swal.fire('შეცდომა', 'მოთხოვნის შესრულება ვერ მოხერხდა.', 'error');
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll(".block-apartment-btn").forEach(button => {
            button.addEventListener("click", () => {
                sendApartmentBlockRequest(button.dataset.apartmentId, true);
            });
        });

        document.querySelectorAll(".unblock-apartment-btn").forEach(button => {
            button.addEventListener("click", () => {
                sendApartmentBlockRequest(button.dataset.apartmentId, false);
            });
        });
    });
</script>